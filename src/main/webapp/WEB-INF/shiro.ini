#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]

# This is a special configuration directive that tells Shiro “For any of Shiro’s default filters that have a loginUrl property, I want that property value to be set to /login.jsp.”

# This allows Shiro’s default authc filter (by default, a FormAuthenticationFilter) to know about the login page. This is necessary for the FormAuthenticationFilter to work correctly.

shiro.loginUrl = /login.jsp

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

# Configure a Realm to connect to a user datastore.  In this simple tutorial, we'll just point to Stormpath since it
# takes 5 minutes to set up:
stormpathClient = com.stormpath.shiro.client.ClientFactory
stormpathClient.cacheManager = $cacheManager
# stormpathClient.apiKeyFileLocation = $HOME/.stormpath/apiKey.properties
stormpathClient.apiKeyFileLocation = D:\ProjectsMine\apache-shiro-tutorial-webapp\src\main\resources\apiKey-54MU3ER1791G39L6WSRV8DDYW.properties
stormpathRealm = com.stormpath.shiro.realm.ApplicationRealm
stormpathRealm.client = $stormpathClient
# Find this URL in your Stormpath console for an application you create:
# Applications -> (choose application name) --> Details --> REST URL
stormpathRealm.applicationRestUrl = https://api.stormpath.com/v1/applications/2mGw4ZRaeCoUQmKMY6fkR4
stormpathRealm.groupRoleResolver.modeNames = name
securityManager.realm = $stormpathRealm

[urls]

# This section allows you to use a very succinct name/value pair syntax to tell shiro how to filter request for any given URL path. All paths in [urls] are relative to the web application’s [HttpServletRequest.getContextPath()]

# These name/value pairs offer an extremely powerful way to filter requests, allowing for all sorts of security rules. A deeper coverage of urls and filter chains is outside the scope of this document, but please do read more about it if you’re interested. http://shiro.apache.org/web.html#Web-%7B%7B%5Curls%5C%7D%7D

# The first line indicates “Whenever Shiro sees a request to the /login.jsp url, enable the Shiro authc filter during the request”.
/login.jsp = authc

# The second line means “whenever Shiro sees a request to the /logout url, enable the Shiro logout filter during the request.”
/logout = logout

/account/** = authc

# Both of these filters are a little special: they don’t actually require anything to be ‘behind’ them. Instead of filtering, they will actually just process the request entirely. This means there isn’t anything for you to do for requests to these URLs - no controllers to write! Shiro will handle the requests as necessary.

